# Use root/example as user/password credentials
version: "3.9"

services:
  mongo:
    container_name: mongo
    image: mongo
    restart: always
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_LOGIN}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_PASSWORD}
      MONGO_INITDB_DATABASE: ${MONGO_INITDB_DATABASE}
    volumes:
      - ./data/mongodb/db:/data/db
    healthcheck:
      test:
      - CMD
      - mongo
      - --eval
      - "db.adminCommand('ping')"

  mongo-express:
    container_name: mongo-express
    image: mongo-express
    restart: always
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: ${MONGO_LOGIN}
      ME_CONFIG_MONGODB_ADMINPASSWORD: ${MONGO_PASSWORD}
      ME_CONFIG_MONGODB_SERVER: ${ME_CONFIG_MONGODB_SERVER}
      ME_CONFIG_BASICAUTH_USERNAME: ${ME_BASIC_LOGIN}
      ME_CONFIG_BASICAUTH_PASSWORD: ${ME_BASIC_PASS}
    depends_on:
      mongo:
        condition: service_healthy
    external_links:
      - "mongo:database"
    ports:
      - 8081:8081

  grpc-service:
    container_name: grpc-service
    build:
      context: .
      dockerfile: grpcService/Dockerfile
    restart: always
    environment:
      MONGODB_SERVER: ${ME_CONFIG_MONGODB_SERVER}
      MONGODB_ADMINUSERNAME: ${MONGO_LOGIN}
      MONGODB_PASSWORD: ${MONGO_PASSWORD}
    depends_on: 
      mongo:
        condition: service_started
    external_links:
      - "mongo:database"

  web-api:
    container_name: web-api
    build: 
      context: .
      dockerfile: WebAPIService/Dockerfile
    restart: always
    depends_on:
      grpc-service:
        condition: service_started
    environment:
      GRPC_ADDRESS: ${GRPC_ADDRESS}
    external_links:
      - "grpc-service:backend"

  proxy:
    container_name: proxy
    restart: always
    depends_on: 
      - web-api
    build: ./nginx
    ports:
      - 8082:80
      - 8083:443

    